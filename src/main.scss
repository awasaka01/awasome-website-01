// Imports
@use "helpers/_bundled.scss" as *;

html {
	// Investigate why the comment is being duplicated onto the next line when saving.
	position: relative;
	min-height: 100%; 
}
body { @extend %bodyDefaults; min-height: 100%; }


.unhideRandom {
	display: flex;
	flex-direction:  row;
}



#corners {
	* {
		--gradient: #0000 40%, rgb(255 255 255 / 17.3%) 0 60%, #0000 0;
		position: absolute;
		bottom: 0;

		width:  10px; 
		height: 10px;
		margin: 10px;

		background: 
			linear-gradient(0deg, var(--gradient)),
			linear-gradient(90deg, var(--gradient));
	}
	*:nth-child(1) { top:    0; left:   0; }
	*:nth-child(2) { top:    0; right:  0; }
	*:nth-child(3) { bottom: 0; left:   0; }
	*:nth-child(4) { right:  0; bottom: 0; }
}


$text-color: $fg-1la;
$a: #ff5b81; $b: #ff4375; $c: #ff2558; $d: #ce3bd640; $e: #cd39c821;


// ANCHOR - Main Container (holds all the little screens)
#main-container-T {
	$width: 30px; 
	$depth: 3px;
	
	display: inline-flex;
	flex-direction: column;

	min-width: 0;
	max-width: min-content;
	margin: 60px 35px 200px;

	background-color: $bg-1l1;
	box-shadow: 
		f_98shadow_outer($depth, $width),
		50px 50px 100px 0 rgb(0 0 0 / 23.4%);

	> *:not(:first-child) { margin-top: $width + $depth*4; }
	> * {
		@include terminalStyle;
		padding: 10px;
		box-shadow:
			f_98shadow_inner($depth),
			inset 50px 50px 100px 0 rgb(0 0 0 / 34%);
		position: relative;
		z-index: 0;
		
		// Curved glass overlay
		&::after {
			content: "";
			pointer-events: none;
			position: absolute;
			inset: 0;
			z-index: 10;
			border-radius: 2.5% 2.5% 3.5% 3.5%/5% 5% 7% 7%;

			box-shadow:
				0 1.5px 12px 0 rgb(255 255 255 / 10%) inset,
				0 0 32px 0 rgb(0 0 0 / 10%) inset;

			background:
				/* highlight/glare */
				linear-gradient(120deg, rgb(255 255 255 / 18%) 10%, rgb(255 255 255 / 8%) 30%, rgb(255 255 255 / 0%) 60%),
				/* subtle vignette */
				radial-gradient(ellipse 80% 90% at 50% 60%, rgb(255 255 255 / 10%) 0%, rgb(255 255 255 / 0%) 80%),
				/* edge shadow */
				radial-gradient(ellipse 100% 100% at 50% 50%, rgb(0 0 0 / 10%) 60%, rgb(0 0 0 / 18%) 100%);
			mix-blend-mode: lighten;
		}
		// Glass reflection for solid backgrounds
		&::before {
			content: "";
			pointer-events: none;
			position: absolute;
			inset: 0;
			z-index: 9;
			border-radius: 2.5% 2.5% 3.5% 3.5%/5% 5% 7% 7%;
			background:
				linear-gradient(120deg, rgb(255 255 255 / 10%) 10%, rgb(255 255 255 / 4%) 30%, rgb(255 255 255 / 0%) 60%),
				radial-gradient(ellipse 80% 90% at 50% 60%, rgb(255 255 255 / 5%) 0%, rgb(255 255 255 / 0%) 80%);
			opacity: 0.7;
			mix-blend-mode: lighten;
			filter: blur(1.5px);
			transition: opacity 0.3s;
		}
	}
	* {
		position: relative;
		z-index: 1;
		color: #fff;
		text-shadow:
			0 0 1.5px #fff,
			0 0 4px #fff,
			0 0 8px $c,
			0 0 16px $c,
			0 0 20px $c;

		// Simulated glass reflection above text
		&::before {
			content: attr(data-reflect);
			display: none;
		}
		// Only show reflection for text nodes
		&:not([data-reflect])::before {
			content: attr(data-reflect);
			display: none;
		}
		// Show reflection for visible text elements
		&[data-reflect]::before {
			display: block;
			position: absolute;
			left: 0;
			right: 0;
			top: -1.2em;
			text-align: inherit;
			color: #fff;
			opacity: 0.11;
			filter: blur(7px) brightness(1.2);
			pointer-events: none;
			z-index: 11;
			text-shadow:
				0 0 8px #fff,
				0 0 16px $c,
				0 0 32px $c;
			white-space: pre;
		}
	}
}


@mixin terminalStyle {
	// Striped Lines + Faint RGB Pixelated overlay effects
	position: relative;
	font-family: Terminal;
	text-shadow: 0 0 4px; // Glowing text
	background: radial-gradient(circle, #1a1825 0%, #070c12 100%);
	&::before {
		pointer-events: none;
		content: " ";

		position: absolute; z-index: 2;
		top: 0; bottom: 0; left: 0;

		display: block;

		background:
			linear-gradient(to bottom, #1210101c 50%, #00000025 50%),
			linear-gradient(to right, #ff00000f, #00ff0005, #0000ff0f),
			linear-gradient(to bottom, #0000 50%, #00000017 50%);
		background-size: 
			100% 2px,
 
			3px 100%,
 
			100% 16px;
	}
}



// Main menu for page selection
#pageList {
	@include terminalStyle;
	display: flex;	
	flex-direction: column;

	padding: 20px;

	font-size: 16px;
	color: rgba($text-color, 0.3);

	.title { color: $c; }


	// List of page links <p><a href="/">-> <u>Title</u> - Description</a></p>
	.links {
		display: flex;
		flex-direction: column;
		white-space: pre; // Disable the auto-collpase of spaces ' ' in the html (after the ->)

		a {
			cursor: pointer;

			display: flex;

			width: 100%;

			color: rgba($text-color, 0.5);

			outline: none;
			&:hover, &:focus-within, &:focus {
				background-color: $c;
				box-shadow: $c 0 0 10px;
				&, * { color: $bg-1; text-decoration-color: #0000; }
			}
		}
		u {
			color:                     $text-color;
			text-decoration-color:     rgba($text-color, 0.7);
			text-decoration-thickness: 1px;
			text-underline-offset:     2px;
		}
	}
	#logo-text {
		line-height: 1ch; // Required to make all characters square
		white-space: pre;
		.a { color: $a; } .b { color: $b; } .c { color: $c; } .d { color: $d; } .e { color: $e; }
	}
}



// 
#links {
	position: absolute;
	bottom: 0;

	display: flex;
	flex-direction: row;
	align-items: center;

	margin: 20px;

	font-family: "Roboto Mono";
	line-height: 1ch;

	* { display: flex; white-space: pre; }
	a:not(.no-underline) { text-decoration: underline; text-decoration-color: rgba($text-color, 0.3); }
	a:hover, a:focus-within { color: $a; text-decoration-color: #0000; }
	.divider {
		$color: #ffffff2f;
		width: 2px;
		height: 10px;
		margin: 0 10px;
		background: f_hardGradient($color #0000 $color #0000 $color, to bottom);
	}
}



#barcode {
	display: inline-flex;
	// The actual bars
	> div {
		display: inline-flex;
		flex-grow: 1;
		height: 15px;
		> div {
			display: inline-flex;

			width: 50%;
			margin-left: 50%;
		
			color: rgba($c, 0.7);

			background-color: currentcolor;
			box-shadow: 0 0 10px currentcolor;
		}
	}
}




#sorting {
	flex-direction: column;
	padding: 10px;
	color: rgba($text-color, 0.7);
	// box-shadow: f_98shadow_full(), inset 50px 50px 100px 0 rgb(0 0 0 / 34%), 50px 50px 100px 0 rgb(0 0 0 / 23.4%);box-shadowbox-shadow
	@include terminalStyle;
	&, * {
		display: flex;
		white-space: pre;
	}
	div {
		color: rgba($text-color, 0.2);
	}

	#sortingBars {
		align-items: end;
		font-size: 1px;
		* {
			content: "";

			flex-grow: 1;

			box-sizing: initial;
			padding-bottom: 10em;

			color: $c;

			background-color: $c;
			box-shadow: 0 0 10px currentcolor;
		}
	}
}
















#main-container-P {
	// Generate a zigzag shape using a repeating conic gradient, to be used as a background or mask
	// note: set background/mask-size to [X% 100%] where X is the desired scale, or if left/right then [100% X%]
	@function f-zigzag-conic($side: "top", $background-color: #000000, $outer-color: transparent) {
		$offset: 0;

		@if $side=="bottom" {
			$offset: 0.5turn;
		} @else if $side=="top" {
			$offset: 0turn; 
		} @else if $side == "right" {
			$offset: 0.25turn;
		} @else if $side == "left" {
			$offset: 0.75turn;
		} @else {
			@error "Unknown side: #{$side}, must be 'top', 'bottom', 'right' or 'left'";
		}
		// misalign the center values by 1grad to have a very tiny gradient between the two colors, 
		// helping elimatinate anti-aliasing
		@return conic-gradient(
			from #{$offset}
			at #{$side},
			$outer-color 0grad 150grad,
			$background-color 151grad 249grad, 
			$outer-color 250grad 50grad,
		);
	}
	z-index: -1;

	width: 100%;
	height: 600px;
	padding: 10px;
	padding-top: 40px;
	border: none;

	color: black;

	background-color: rgb(154 84 96);

	mask: f-zigzag-conic("top");

	animation: scroll-mask 100s linear infinite;

	mask-position: 0% top;
	mask-size: 5% 100%;
	&::before {
		content: "";

		position: absolute;
		z-index: -1;
		top: 0;
		left: 0;

		width: 100%;
		height: 100%;

		background-color: $c;
		filter: drop-shadow(0 0 8 0 $c);
	}
}
@keyframes scroll-mask {
	0% { mask-position: 0% top; }
	100% { mask-position: 100% top; }
}

// Enhanced text glow and glass reflection effect
.glow-reflect {
  position: relative;
  z-index: 1;
  color: #fff;
  text-shadow:
    0 0 2px #fff,
    0 0 6px #fff,
    0 0 12px $c,
    0 0 24px $c,
    0 0 32px $c;

  &::before {
    content: attr(data-reflect);
    position: absolute;
    left: 0;
    right: 0;
    top: -1.2em;
    text-align: inherit;
    color: #fff;
    opacity: 0.18;
    filter: blur(6px) brightness(1.5);
    pointer-events: none;
    z-index: 11;
    text-shadow:
      0 0 8px #fff,
      0 0 16px $c,
      0 0 32px $c;
    white-space: pre;
  }
}
// Usage: <p class="glow-reflect" data-reflect="YOUR TEXT">YOUR TEXT</p>
// Or add data-reflect dynamically with JS for all .glow-reflect elements
